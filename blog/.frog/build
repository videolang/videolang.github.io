((3) 0 () 7 ((p+ #"/home/travis/build/videolang/website/blog/_src/posts/2018-06-10-video-v0-2-releace-candidate.md" . unix) (p+ #"/home/travis/build/videolang/website/blog/_src/posts/2018-02-20-video-at-racketcon-2017.md" . unix) (p+ #"/home/travis/build/videolang/website/blog/_src/posts/2017-07-01-hello-chroma-key.md" . unix) (p+ #"/home/travis/build/videolang/website/blog/_src/posts/2017-07-11-video-v0-2-alpha.md" . unix) (p+ #"/home/travis/build/videolang/website/blog/_src/posts/2017-08-28-video-v0-2-beta.md" . unix) (p+ #"/home/travis/build/videolang/website/blog/_src/posts/2018-03-21-making-an-ide-plugin-for-drracket.md" . unix) (p+ #"/home/travis/build/videolang/website/blog/_src/posts/2018-04-17-video-at-bob-2018.md" . unix)) () (h ! (equal) ((? . 0) f post (u . "Video v0.2 Releace Candidate") (? . 0) 1528738860 (p+ #"/home/travis/build/videolang/website/blog/2018/06/10/video-v0-2-releace-candidate/index.html" . unix) (u . "/blog/2018/06/10/video-v0-2-releace-candidate/") (u . "2018-06-10T21:49:43") (? . 6) #f (c (u . "release")) (u . "\n<p>The first release candidate for Video v0.2 has been released! You can install it from the command line with:</p>\n\n<pre><code>raco pkg install video-testing</code></pre>\n\n<p>As before, the <code>video</code> Racket package points to the latest stable version (v0.1 when writing this post), so use <code>video-testing</code> to download the RC.</p>\n\n<p>You can report any bugs you find here: https://github.com/videolang/video/issues</p>\n\n<p>Here is a list of the major changes from the last beta:</p>\n\n<ul>\n <li>Update Video to use a version of libvid that does not segfault.</li>\n <li>More precise dependencies in Video&rsquo;s info file.</li>\n <li>If FF_LOG=stdout, then do no redirection of ffmpeg&rsquo;s logging.</li>\n <li>More complete render parameterization.</li>\n <li>Cleaner error messages.</li>\n <li>Fixed bug preventing Video from rendering audio-only files.</li></ul>") #f (u . "\n<p>The first release candidate for Video v0.2 has been released! You can install it from the command line with:</p>\n\n<pre><code>raco pkg install video-testing</code></pre>\n\n<p>As before, the <code>video</code> Racket package points to the latest stable version (v0.1 when writing this post), so use <code>video-testing</code> to download the RC.</p>\n\n<p>You can report any bugs you find here: https://github.com/videolang/video/issues</p>\n\n<p>Here is a list of the major changes from the last beta:</p>\n\n<ul>\n <li>Update Video to use a version of libvid that does not segfault.</li>\n <li>More precise dependencies in Video&rsquo;s info file.</li>\n <li>If FF_LOG=stdout, then do no redirection of ffmpeg&rsquo;s logging.</li>\n <li>More complete render parameterization.</li>\n <li>Cleaner error messages.</li>\n <li>Fixed bug preventing Video from rendering audio-only files.</li></ul>")) ((? . 1) f post (u . "Video at RacketCon 2017") (? . 1) 1528738860 (p+ #"/home/travis/build/videolang/website/blog/2018/02/20/video-at-racketcon-2017/index.html" . unix) (u . "/blog/2018/02/20/video-at-racketcon-2017/") (u . "2018-02-20T11:10:00") (? . 4) (? . 5) (c (u . "news") c (u . "Author: Leif Andersen")) (u . "\n<p>I recently gave a talk about Video at <a href=\"https://con.racket-lang.org/\">RacketCon 2017</a>. The Video goes over the basics of the language&rsquo;s API and gives some incites on the tower of DSLs Video runs on. If you haven&rsquo;t watched the Video yet you can find it below.</p>\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube-nocookie.com/embed/OZXslNVaCOQ\" frameborder=\"0\" allow=\"autoplay; encrypted-media\" allowfullscreen=\"allowfullscreen\"></iframe>") #f (u . "\n<p>I recently gave a talk about Video at <a href=\"https://con.racket-lang.org/\">RacketCon 2017</a>. The Video goes over the basics of the language&rsquo;s API and gives some incites on the tower of DSLs Video runs on. If you haven&rsquo;t watched the Video yet you can find it below.</p>\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube-nocookie.com/embed/OZXslNVaCOQ\" frameborder=\"0\" allow=\"autoplay; encrypted-media\" allowfullscreen=\"allowfullscreen\"></iframe>")) ((? . 2) f post (u . "Hello Chroma Key") (? . 2) 1528738860 (p+ #"/home/travis/build/videolang/website/blog/2017/07/01/hello-chroma-key/index.html" . unix) (u . "/blog/2017/07/01/hello-chroma-key/") (u . "2017-07-01T22:11:41") #f (? . 3) (c (u . "announcements") c (u . "Author: Leif Andersen")) (u . "\n<p>Welcome to the Video Blog. This blog is for Video release announcements, status updates, tutorials, and anything relevant to Video and video editing in general.</p>") #t (u . "\n<p>Welcome to the Video Blog. This blog is for Video release announcements, status updates, tutorials, and anything relevant to Video and video editing in general.</p>\n<!-- more-->\n\n<p>Currently, as of this post&rsquo;s creation, the latest version of Video is v0.1. This version requires <a href=\"https://www.mltframework.org/\">MLT</a> which is not included. You can find it on the <a href=\"http://lang.video/download.html\">download page</a>. Alpha builds of v0.2 are nearly ready. The major update with this version is the removal of MLT as a dependency. Instead, Video will rely entirely on <a href=\"http://ffmpeg.org/\">FFmpeg</a>, which will also be pre-bundled with the Mac and Windows builds of Video. Check out the <a href=\"https://github.com/videolang/video\">Github Project Page</a> if you want to check out the current progress, report any issues, or contribute.</p>")) ((? . 3) f post (u . "Video v0.2 Alpha") (? . 3) 1528738860 (p+ #"/home/travis/build/videolang/website/blog/2017/07/11/video-v0-2-alpha/index.html" . unix) (u . "/blog/2017/07/11/video-v0-2-alpha/") (u . "2017-07-11T11:18:14") (? . 2) (? . 4) (c (u . "release") c (u . "Author: Leif Andersen")) (u . "\n<p><strong>Update2</strong> A third alpha is released. This should be the last alpha build. The next release will be a beta. You can <a href=\"https://github.com/videolang/video/releases/tag/v0.2-alpha.2\">download the build here</a>.</p>\n\n<p><strong>Update:</strong> A second alpha release has been created. This fixes some bugs preventing Video from working on Windows and Linux. Video has now been tested on all three platforms. You can <a href=\"https://github.com/videolang/video/releases/tag/v0.2-alpha.1\">download the build here</a>.</p>\n\n<p>This is an alpha version of Video v0.2. The main update here is dropping MLT as a dependency, and bundling FFmpeg for Windows and Mac builds. As such, Video can be used out of the box on now, without the need to hunt down the more obscure MLT library separately. Linux machines must still download the correct version of FFmpeg themselves. However, this is much easier to do.</p>\n\n<p>Specifically, FFmpeg 3.2 is recommended, but the following specific library versions are also usable:</p>\n\n<ul>\n <li>libavcodec v57</li>\n <li>libavformat v57</li>\n <li>libavutil v55</li>\n <li>libswscale v4</li>\n <li>libswresample v2</li>\n <li>libavfilter v6</li></ul>\n\n<p>Again, these are included for the mac/windows builds, and are all part of an FFmpeg 3.x installation.</p>\n\n<p>Some notes about why this is still alpha:</p>\n\n<ul>\n <li>The video preview currently does not work. People needing access to this feature need to use v0.1.1.</li>\n <li>Video has not been thoroughly tested</li></ul>\n\n<p>Once the first one has been addressed we can move to beta, and once both have been addressed we can move to rc.</p>\n\n<p>You can <a href=\"https://github.com/videolang/video/releases/tag/v0.2-alpha\">download the release here</a>.</p>\n\n<p>Please report any issues you find on <a href=\"https://github.com/videolang/video/issues\">the bug tracker</a>. (If you don&rsquo;t have a github account you can also use this <a href=\"https://gitreports.com/issue/videolang/video\">anonymous form</a>.</p>") #f (u . "\n<p><strong>Update2</strong> A third alpha is released. This should be the last alpha build. The next release will be a beta. You can <a href=\"https://github.com/videolang/video/releases/tag/v0.2-alpha.2\">download the build here</a>.</p>\n\n<p><strong>Update:</strong> A second alpha release has been created. This fixes some bugs preventing Video from working on Windows and Linux. Video has now been tested on all three platforms. You can <a href=\"https://github.com/videolang/video/releases/tag/v0.2-alpha.1\">download the build here</a>.</p>\n\n<p>This is an alpha version of Video v0.2. The main update here is dropping MLT as a dependency, and bundling FFmpeg for Windows and Mac builds. As such, Video can be used out of the box on now, without the need to hunt down the more obscure MLT library separately. Linux machines must still download the correct version of FFmpeg themselves. However, this is much easier to do.</p>\n\n<p>Specifically, FFmpeg 3.2 is recommended, but the following specific library versions are also usable:</p>\n\n<ul>\n <li>libavcodec v57</li>\n <li>libavformat v57</li>\n <li>libavutil v55</li>\n <li>libswscale v4</li>\n <li>libswresample v2</li>\n <li>libavfilter v6</li></ul>\n\n<p>Again, these are included for the mac/windows builds, and are all part of an FFmpeg 3.x installation.</p>\n\n<p>Some notes about why this is still alpha:</p>\n\n<ul>\n <li>The video preview currently does not work. People needing access to this feature need to use v0.1.1.</li>\n <li>Video has not been thoroughly tested</li></ul>\n\n<p>Once the first one has been addressed we can move to beta, and once both have been addressed we can move to rc.</p>\n\n<p>You can <a href=\"https://github.com/videolang/video/releases/tag/v0.2-alpha\">download the release here</a>.</p>\n\n<p>Please report any issues you find on <a href=\"https://github.com/videolang/video/issues\">the bug tracker</a>. (If you don&rsquo;t have a github account you can also use this <a href=\"https://gitreports.com/issue/videolang/video\">anonymous form</a>.</p>")) ((? . 5) f post (u . "Making an IDE Plugin for DrRacket") (? . 5) 1528738860 (p+ #"/home/travis/build/videolang/website/blog/2018/03/21/making-an-ide-plugin-for-drracket/index.html" . unix) (u . "/blog/2018/03/21/making-an-ide-plugin-for-drracket/") (u . "2018-03-21T12:52:03") (? . 1) (? . 6) (c (u . "drracket") c (u . "tutorial") c (u . "Author: Leif Andersen")) (u . "\n<p>I recently had several students ask me to show them how to make DrRacket plugins for their new language. It is easy to do, but I noticed that there aren any existing guides on how to do it. There is <a href=\"https://docs.racket-lang.org/tools/index.html\">the plugin documentation</a>, which is a good reference and has some good examples. Unfortunately, it lacks a good step by step tutorial on how to make new IDE plugins. This post is that tutorial.</p>\n\n<p>DrRacket plugins fall into one of two main categories:</p>\n\n<ol>\n <li>Language-Specific Plugins</li>\n <li>Global Plugins</li></ol>\n\n<p>The former only enables the plugin when the user is editing a file in that plugin&rsquo;s associated language. The latter, however, is for plugins that should always be enabled, such as <a href=\"https://github.com/takikawa/drracket-vim-tool\">DrRacket&rsquo;s Vim Mode</a>. This tutorial covers both plugin styles.</p>") #t (u . "\n<p>I recently had several students ask me to show them how to make DrRacket plugins for their new language. It is easy to do, but I noticed that there aren any existing guides on how to do it. There is <a href=\"https://docs.racket-lang.org/tools/index.html\">the plugin documentation</a>, which is a good reference and has some good examples. Unfortunately, it lacks a good step by step tutorial on how to make new IDE plugins. This post is that tutorial.</p>\n\n<p>DrRacket plugins fall into one of two main categories:</p>\n\n<ol>\n <li>Language-Specific Plugins</li>\n <li>Global Plugins</li></ol>\n\n<p>The former only enables the plugin when the user is editing a file in that plugin&rsquo;s associated language. The latter, however, is for plugins that should always be enabled, such as <a href=\"https://github.com/takikawa/drracket-vim-tool\">DrRacket&rsquo;s Vim Mode</a>. This tutorial covers both plugin styles.</p>\n<!-- more-->\n\n<h2 id=\"language-specific-plugins\">Language-Specific Plugins</h2>\n\n<p>Before you can create a language-specific plugin for DrRacket, you first need a language that Racket can recognize. There are plenty of good resources to learn how to make languages with Racket. I recommend reading <a href=\"http://blog.racket-lang.org/2017/03/languages-as-dotfiles.html\">Languages as Dotfiles</a>, which is a simple step by step tutorial. Other good resources are <a href=\"https://beautifulracket.com/#tutorials\">Matthew Butterick&rsquo;s Beautiful Racket</a> and <a href=\"https://docs.racket-lang.org/guide/syntax_module-reader.html\">the Racket documentation</a>.</p>\n\n<h3 id=\"making-a-dsl\">Making a DSL</h3>\n\n<p>For this tutorial we will assume a language called <code>clippy</code>, the happy-helping language. The language will be identical to <code>racket/base</code>, except that it puts a button in DrRacket&rsquo;s toolbar that displays &ldquo;Howdy!&rdquo; when clicked. Let&rsquo;s start out with the following program for our language:</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre>1\n2\n3\n4\n5\n6</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span class=\"kn\">#lang racket/base</span> <span class=\"c1\">;; clippy/main.rkt</span>\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/require.html#(form._((lib._racket/private/base..rkt)._provide))\" style=\"color: inherit\">provide</a> </span><span class=\"p\">(</span><span class=\"nf\"><a href=\"http://docs.racket-lang.org/reference/require.html#(form._((lib._racket/private/base..rkt)._all-from-out))\" style=\"color: inherit\">all-from-out</a></span> <span class=\"nv\">racket/base</span><span class=\"p\">))</span>\n<span class=\"p\">(</span><span class=\"nf\"><a href=\"http://docs.racket-lang.org/reference/module.html#(form._((quote._~23~25kernel)._module*))\" style=\"color: inherit\">module*</a></span> <span class=\"nv\">reader</span> <span class=\"nv\">syntax/module-reader</span>\n  <span class=\"nv\">clippy</span>\n  <span class=\"kd\">#:read</span> <span class=\"nv\"><a href=\"http://docs.racket-lang.org/reference/Reading.html#(def._((quote._~23~25kernel)._read))\" style=\"color: inherit\">read</a></span>\n  <span class=\"kd\">#:read-syntax</span> <span class=\"nv\"><a href=\"http://docs.racket-lang.org/reference/Reading.html#(def._((quote._~23~25kernel)._read-syntax))\" style=\"color: inherit\">read-syntax</a></span><span class=\"p\">)</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>This file re-exports <code>racket/base</code>, and also sets the reader to use <code>read</code> and <code>read-syntax</code>. This file assumes that it has been installed, so make sure at some point to run:</p>\n\n<pre><code>$ cd clippy/\n$ raco pkg install</code></pre>\n\n<p>Now you can open DrRacket and start a file with <code>#lang clippy</code> and DrRacket will behave as if you told it to use <code>racket/base</code> for its language.</p>\n\n<h3 id=\"adding-language-specific-plugins\">Adding Language-Specific Plugins</h3>\n\n<p>Along with <code>read</code> and <code>read-syntax</code>, the <code>reader</code> submodule optionally provide an info function for tools surrounding your DSL. This info function includes everything from how syntax should be colored to even changing the entire behavior of the IDE. Language info functions are given a key, and responds with a value based on a pre-determined set of rules. DrRacket also gives default values to this function to handle different keys. The Racket documentation contains a <a href=\"https://docs.racket-lang.org/tools/lang-languages-customization.html\">list of every possible symbol DrRacket will use</a>.</p>\n\n<p>For this tutorial, we only care about one possible key: <a href=\"http://docs.racket-lang.org/tools/lang-languages-customization.html?q=drracket%3Atoolbar-buttons#%28idx._%28gentag._18._%28lib._scribblings%2Ftools%2Ftools..scrbl%29%29%29\"><code>drracket:toolbar-buttons</code></a>. This key tells DrRacket to add new buttons when editing a specific language. DrRacket expects this key to contain a list for each button, which in tern is represented as a list with an element for:</p>\n\n<ul>\n <li>the button&rsquo;s name,</li>\n <li>the button&rsquo;s image,</li>\n <li>the callback when the button is pressed, and</li>\n <li>the button&rsquo;s priority in the toolbar.</li></ul>\n\n<p>For simplicity, let&rsquo;s define our list in its own file:</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span class=\"kn\">#lang racket/gui</span> <span class=\"c1\">;; clippy/button.rkt</span>\n\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/require.html#(form._((lib._racket/private/base..rkt)._provide))\" style=\"color: inherit\">provide</a> </span><span class=\"nv\">clippy-button</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/require.html#(form._((lib._racket/private/base..rkt)._require))\" style=\"color: inherit\">require</a> </span><span class=\"nv\">pict</span><span class=\"p\">)</span>\n\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a> </span><span class=\"nv\">clippy-button</span>\n  <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((quote._~23~25kernel)._list))\" style=\"color: inherit\">list</a> </span><span class=\"s\">\"Clippy\"</span>\n        <span class=\"p\">(</span><span class=\"nf\">pict-&gt;bitmap</span> <span class=\"p\">(</span><span class=\"nf\">disk</span> <span class=\"mi\">16</span><span class=\"p\">))</span>\n        <span class=\"p\">(</span><span class=\"err\"><a href=\"http://docs.racket-lang.org/reference/lambda.html#(form._((lib._racket/private/base..rkt)._~ce~bb))\" style=\"color: inherit\">λ</a></span> <span class=\"p\">(</span><span class=\"nf\">frame</span><span class=\"p\">)</span>\n          <span class=\"p\">(</span><span class=\"nf\">message-box</span> <span class=\"s\">\"Clippy\"</span> <span class=\"s\">\"Howdy!\"</span><span class=\"p\">))</span>\n        <span class=\"no\">#f</span><span class=\"p\">))</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>Now we are ready to create our <code>make-info</code> function, and place it in the <code>reader</code> submodule:</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre>1\n2\n3\n4\n5</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a> </span><span class=\"p\">(</span><span class=\"nf\">make-info</span> <span class=\"nv\">key</span> <span class=\"nv\">default</span> <span class=\"nv\">use-default</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/case.html#(form._((lib._racket/private/more-scheme..rkt)._case))\" style=\"color: inherit\">case</a> </span><span class=\"nv\">key</span>\n    <span class=\"p\">[(</span><span class=\"nf\">drracket:toolbar-buttons</span><span class=\"p\">)</span>\n     <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((quote._~23~25kernel)._list))\" style=\"color: inherit\">list</a> </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/Module_Names_and_Loading.html#(def._((quote._~23~25kernel)._dynamic-require))\" style=\"color: inherit\">dynamic-require</a> </span><span class=\"ss\">'clippy/button</span> <span class=\"ss\">'clippy-button</span><span class=\"p\">))]</span>\n    <span class=\"p\">[</span><span class=\"nf\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((lib._racket/private/letstx-scheme..rkt)._else))\" style=\"color: inherit\">else</a></span> <span class=\"p\">(</span><span class=\"nf\">use-default</span> <span class=\"nv\">key</span> <span class=\"nv\">default</span><span class=\"p\">)]))</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>Note the use of <code>dynamic-require</code> rather than a static <code>require</code> statement. The <code>clippy-button</code> list requires the <code>pict</code> library to draw a circle. However, the <code>clippy</code> language proper does not have that dependency. By using a dynamic-require, we only load the <code>pict</code> library for DrRacket.<sup><a href=\"#2018-03-21-making-an-ide-plugin-for-drracket-footnote-1-definition\" name=\"2018-03-21-making-an-ide-plugin-for-drracket-footnote-1-return\">1</a></sup></p>\n\n<p>Putting everything together gives:</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span class=\"kn\">#lang racket/base</span> <span class=\"c1\">;; clippy/main.rkt</span>\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/require.html#(form._((lib._racket/private/base..rkt)._provide))\" style=\"color: inherit\">provide</a> </span><span class=\"p\">(</span><span class=\"nf\"><a href=\"http://docs.racket-lang.org/reference/require.html#(form._((lib._racket/private/base..rkt)._all-from-out))\" style=\"color: inherit\">all-from-out</a></span> <span class=\"nv\">racket/base</span><span class=\"p\">))</span>\n<span class=\"p\">(</span><span class=\"nf\"><a href=\"http://docs.racket-lang.org/reference/module.html#(form._((quote._~23~25kernel)._module*))\" style=\"color: inherit\">module*</a></span> <span class=\"nv\">reader</span> <span class=\"nv\">syntax/module-reader</span>\n  <span class=\"nv\">clippy</span>\n  <span class=\"kd\">#:read</span> <span class=\"nv\"><a href=\"http://docs.racket-lang.org/reference/Reading.html#(def._((quote._~23~25kernel)._read))\" style=\"color: inherit\">read</a></span>\n  <span class=\"kd\">#:read-syntax</span> <span class=\"nv\"><a href=\"http://docs.racket-lang.org/reference/Reading.html#(def._((quote._~23~25kernel)._read-syntax))\" style=\"color: inherit\">read-syntax</a></span>\n  <span class=\"kd\">#:info</span> <span class=\"nv\">make-info</span>\n  \n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a> </span><span class=\"p\">(</span><span class=\"nf\">make-info</span> <span class=\"nv\">key</span> <span class=\"nv\">default</span> <span class=\"nv\">use-default</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/case.html#(form._((lib._racket/private/more-scheme..rkt)._case))\" style=\"color: inherit\">case</a> </span><span class=\"nv\">key</span>\n    <span class=\"p\">[(</span><span class=\"nf\">drracket:toolbar-buttons</span><span class=\"p\">)</span>\n     <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((quote._~23~25kernel)._list))\" style=\"color: inherit\">list</a> </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/Module_Names_and_Loading.html#(def._((quote._~23~25kernel)._dynamic-require))\" style=\"color: inherit\">dynamic-require</a> </span><span class=\"ss\">'clippy/button</span> <span class=\"ss\">'clippy-button</span><span class=\"p\">))]</span>\n    <span class=\"p\">[</span><span class=\"nf\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((lib._racket/private/letstx-scheme..rkt)._else))\" style=\"color: inherit\">else</a></span> <span class=\"p\">(</span><span class=\"nf\">use-default</span> <span class=\"nv\">key</span> <span class=\"nv\">default</span><span class=\"p\">)])))</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>Restart DrRake, and create a file that begins with <code>#lang clippy</code>. A new button should appear near the run button.</p>\n\n<h2 id=\"global-plugins\">Global Plugins</h2>\n\n<p>Global DrRacket plugins require the IDE to have meta-information about installed languages. Racket collections can optionally use an <a href=\"http://docs.racket-lang.org/raco/info_rkt.html?q=info\"><code>info.rkt</code></a> file to store meta information for the package, e.g., its name, version, dependancies, etc. In this case, we will use our <code>info.rkt</code> file to inform DrRacket that <code>tool.rkt</code> provides a DrRacket plugin. We will also give it the name <code>\"Clippy\"</code>, and add no icons:</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre>1\n2\n3\n4\n5\n6</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span class=\"kn\">#lang info</span> <span class=\"c1\">;; clippy/info.rkt</span>\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a> </span><span class=\"nv\">collection</span> <span class=\"s\">\"clippy\"</span><span class=\"p\">)</span>\n\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a> </span><span class=\"nv\">drracket-tools</span> <span class=\"o\">'</span><span class=\"p\">((</span><span class=\"s\">\"tool.rkt\"</span><span class=\"p\">)))</span>\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a> </span><span class=\"nv\">drracket-tool-names</span> <span class=\"o\">'</span><span class=\"p\">(</span><span class=\"s\">\"Clippy\"</span><span class=\"p\">))</span>\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a> </span><span class=\"nv\">drracket-tool-icons</span> <span class=\"o\">'</span><span class=\"p\">(</span><span class=\"no\">#f</span><span class=\"p\">))</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>DrRacket expects its plugin file to export a single identifier <code>tool@</code>, which is a <a href=\"http://docs.racket-lang.org/guide/units.html?q=units#%28tech._unit%29\">unit</a><sup><a href=\"#2018-03-21-making-an-ide-plugin-for-drracket-footnote-2-definition\" name=\"2018-03-21-making-an-ide-plugin-for-drracket-footnote-2-return\">2</a></sup>, that satisfies the <code>drracket:tool-exports^</code> signature. We could build and provide this unit from any file, or we could use the <code>racket/unit</code> DSL. This DSL implicitly puts the body of the module<sup><a href=\"#2018-03-21-making-an-ide-plugin-for-drracket-footnote-3-definition\" name=\"2018-03-21-making-an-ide-plugin-for-drracket-footnote-3-return\">3</a></sup> in a unit, and provides that unit as the file name. Using <code>racket/unit</code>, we will make a file that looks like:</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span class=\"kn\">#lang racket/unit</span> <span class=\"c1\">;; clippy/tool.rkt</span>\n\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/require.html#(form._((lib._racket/private/base..rkt)._require))\" style=\"color: inherit\">require</a> </span><span class=\"nv\">drracket/tool</span>\n         <span class=\"o\"><a href=\"http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt)._......))\" style=\"color: inherit\">...</a></span> <span class=\"nv\">other</span> <span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/require.html#(form._((lib._racket/private/base..rkt)._require))\" style=\"color: inherit\">require</a> </span><span class=\"nv\">forms</span> <span class=\"o\"><a href=\"http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt)._......))\" style=\"color: inherit\">...</a></span><span class=\"p\">)</span>\n\n<span class=\"p\">(</span><span class=\"nf\"><a href=\"http://docs.racket-lang.org/reference/creatingunits.html#(form._((lib._racket/unit..rkt)._import))\" style=\"color: inherit\">import</a></span> <span class=\"nv\">drracket:tool^</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"nf\"><a href=\"http://docs.racket-lang.org/reference/creatingunits.html#(form._((lib._racket/unit..rkt)._export))\" style=\"color: inherit\">export</a></span> <span class=\"nv\">drracket:tool-exports^</span><span class=\"p\">)</span>\n\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a> </span><span class=\"p\">(</span><span class=\"nf\">phase1</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nf\"><a href=\"http://docs.racket-lang.org/reference/void.html#(def._((quote._~23~25kernel)._void))\" style=\"color: inherit\">void</a></span><span class=\"p\">))</span>\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a> </span><span class=\"p\">(</span><span class=\"nf\">phase2</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nf\"><a href=\"http://docs.racket-lang.org/reference/void.html#(def._((quote._~23~25kernel)._void))\" style=\"color: inherit\">void</a></span><span class=\"p\">))</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>Let&rsquo;s break this file down piece by piece. First, the top-level require:</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre>1\n2\n3\n4</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span class=\"kn\">#lang racket/unit</span> <span class=\"c1\">;; clippy/tool.rkt</span>\n\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/require.html#(form._((lib._racket/private/base..rkt)._require))\" style=\"color: inherit\">require</a> </span><span class=\"nv\">drracket/tool</span>\n         <span class=\"o\"><a href=\"http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt)._......))\" style=\"color: inherit\">...</a></span> <span class=\"nv\">other</span> <span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/require.html#(form._((lib._racket/private/base..rkt)._require))\" style=\"color: inherit\">require</a> </span><span class=\"nv\">forms</span> <span class=\"o\"><a href=\"http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt)._......))\" style=\"color: inherit\">...</a></span><span class=\"p\">)</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>Files written in <code>racket/unit</code> are implicitly wrapped in the body of a unit. However, <code>require</code> statements must be at the module level. Therefore, the <code>racket/unit</code> language allows for one require form at the top of the file to bring in everything. In this case we are bringing in <code>drracket/tool</code>. We bring in this library for the next two lines:</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre>1\n2</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span class=\"p\">(</span><span class=\"nf\"><a href=\"http://docs.racket-lang.org/reference/creatingunits.html#(form._((lib._racket/unit..rkt)._import))\" style=\"color: inherit\">import</a></span> <span class=\"nv\">drracket:tool^</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"nf\"><a href=\"http://docs.racket-lang.org/reference/creatingunits.html#(form._((lib._racket/unit..rkt)._export))\" style=\"color: inherit\">export</a></span> <span class=\"nv\">drracket:tool-exports^</span><span class=\"p\">)</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>Units, unlike Racket modules, can have circular dependancies. Consequently, they use their own <code>import</code>/<code>export</code> system that is distinct from the traditional <code>require</code>/<code>provide</code> system. Here, we are giving our unit access to the <code>drracket:tool^</code> signature, and specifying that our unit satisfies the <code>drracket:tool-exports^</code> signature. This signature requires us to provide two functions:</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre>1\n2</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a> </span><span class=\"p\">(</span><span class=\"nf\">phase1</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nf\"><a href=\"http://docs.racket-lang.org/reference/void.html#(def._((quote._~23~25kernel)._void))\" style=\"color: inherit\">void</a></span><span class=\"p\">))</span>\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a> </span><span class=\"p\">(</span><span class=\"nf\">phase2</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nf\"><a href=\"http://docs.racket-lang.org/reference/void.html#(def._((quote._~23~25kernel)._void))\" style=\"color: inherit\">void</a></span><span class=\"p\">))</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>Both of these functions are called at different points during DrRacket&rsquo;s startup. Our plugin, however, does not need to set up any special state during these phases. Therefore, we define both functions to do nothing and return <code>#&lt;void&gt;</code>.</p>\n\n<p>One thing we do want our plugin to do is add a new menu option for clippy:</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre>1</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span class=\"p\">(</span><span class=\"nf\">drracket:get/extend:extend-unit-frame</span> <span class=\"nv\">clippy-frame-mixin</span><span class=\"p\">)</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>Where we define <code>clippy-frame-mixin</code> as:<sup><a href=\"#2018-03-21-making-an-ide-plugin-for-drracket-footnote-4-definition\" name=\"2018-03-21-making-an-ide-plugin-for-drracket-footnote-4-return\">4</a></sup></p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a> </span><span class=\"nv\">clippy-frame-mixin</span>\n  <span class=\"p\">(</span><span class=\"nf\"><a href=\"http://docs.racket-lang.org/reference/mixins.html#(form._((lib._racket/private/class-internal..rkt)._mixin))\" style=\"color: inherit\">mixin</a></span> <span class=\"p\">(</span><span class=\"nf\">drracket:unit:frame&lt;%&gt;</span><span class=\"p\">)</span> <span class=\"p\">()</span>\n    <span class=\"p\">(</span><span class=\"nf\"><a href=\"http://docs.racket-lang.org/reference/objcreation.html#(form._((lib._racket/private/class-internal..rkt)._super-new))\" style=\"color: inherit\">super-new</a></span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"nf\"><a href=\"http://docs.racket-lang.org/reference/createclass.html#(form._((lib._racket/private/class-internal..rkt)._inherit))\" style=\"color: inherit\">inherit</a></span> <span class=\"nv\">get-insert-menu</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"nf\"><a href=\"http://docs.racket-lang.org/reference/objcreation.html#(form._((lib._racket/private/class-internal..rkt)._new))\" style=\"color: inherit\">new</a></span> <span class=\"nv\">menu-item%</span>\n         <span class=\"p\">[</span><span class=\"nf\">parent</span> <span class=\"p\">(</span><span class=\"nf\">get-insert-menu</span><span class=\"p\">)]</span>\n         <span class=\"p\">[</span><span class=\"nf\">label</span> <span class=\"s\">\"Paperclip Help\"</span><span class=\"p\">]</span>\n         <span class=\"p\">[</span><span class=\"nf\">callback</span>\n          <span class=\"p\">(</span><span class=\"err\"><a href=\"http://docs.racket-lang.org/reference/lambda.html#(form._((lib._racket/private/base..rkt)._~ce~bb))\" style=\"color: inherit\">λ</a></span> <span class=\"p\">(</span><span class=\"nf\">i</span> <span class=\"nv\">e</span><span class=\"p\">)</span>\n            <span class=\"p\">(</span><span class=\"nf\">message-box</span> <span class=\"s\">\"Clippy\"</span> <span class=\"s\">\"Howdy!\"</span><span class=\"p\">))])))</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>This mixin adds a clippy button to the insert menu, and when selected, a new message box pops up for clippy to say &ldquo;Need any help?&rdquo;.</p>\n\n<p>Putting the whole file together gives us:</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span class=\"kn\">#lang racket/unit</span> <span class=\"c1\">;; clippy/tool.rkt</span>\n\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/require.html#(form._((lib._racket/private/base..rkt)._require))\" style=\"color: inherit\">require</a> </span><span class=\"nv\">drracket/tool</span>\n         <span class=\"nv\">racket/class</span>\n         <span class=\"nv\">racket/gui/base</span><span class=\"p\">)</span>\n\n<span class=\"p\">(</span><span class=\"nf\"><a href=\"http://docs.racket-lang.org/reference/creatingunits.html#(form._((lib._racket/unit..rkt)._import))\" style=\"color: inherit\">import</a></span> <span class=\"nv\">drracket:tool^</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"nf\"><a href=\"http://docs.racket-lang.org/reference/creatingunits.html#(form._((lib._racket/unit..rkt)._export))\" style=\"color: inherit\">export</a></span> <span class=\"nv\">drracket:tool-exports^</span><span class=\"p\">)</span>\n\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a> </span><span class=\"p\">(</span><span class=\"nf\">phase1</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nf\"><a href=\"http://docs.racket-lang.org/reference/void.html#(def._((quote._~23~25kernel)._void))\" style=\"color: inherit\">void</a></span><span class=\"p\">))</span>\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a> </span><span class=\"p\">(</span><span class=\"nf\">phase2</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nf\"><a href=\"http://docs.racket-lang.org/reference/void.html#(def._((quote._~23~25kernel)._void))\" style=\"color: inherit\">void</a></span><span class=\"p\">))</span>\n\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a> </span><span class=\"nv\">clippy-frame-mixin</span>\n  <span class=\"p\">(</span><span class=\"nf\"><a href=\"http://docs.racket-lang.org/reference/mixins.html#(form._((lib._racket/private/class-internal..rkt)._mixin))\" style=\"color: inherit\">mixin</a></span> <span class=\"p\">(</span><span class=\"nf\">drracket:unit:frame&lt;%&gt;</span><span class=\"p\">)</span> <span class=\"p\">()</span>\n    <span class=\"p\">(</span><span class=\"nf\"><a href=\"http://docs.racket-lang.org/reference/objcreation.html#(form._((lib._racket/private/class-internal..rkt)._super-new))\" style=\"color: inherit\">super-new</a></span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"nf\"><a href=\"http://docs.racket-lang.org/reference/createclass.html#(form._((lib._racket/private/class-internal..rkt)._inherit))\" style=\"color: inherit\">inherit</a></span> <span class=\"nv\">get-insert-menu</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"nf\"><a href=\"http://docs.racket-lang.org/reference/objcreation.html#(form._((lib._racket/private/class-internal..rkt)._new))\" style=\"color: inherit\">new</a></span> <span class=\"nv\">menu-item%</span>\n         <span class=\"p\">[</span><span class=\"nf\">parent</span> <span class=\"p\">(</span><span class=\"nf\">get-insert-menu</span><span class=\"p\">)]</span>\n         <span class=\"p\">[</span><span class=\"nf\">label</span> <span class=\"s\">\"Paperclip Help\"</span><span class=\"p\">]</span>\n         <span class=\"p\">[</span><span class=\"nf\">callback</span>\n          <span class=\"p\">(</span><span class=\"err\"><a href=\"http://docs.racket-lang.org/reference/lambda.html#(form._((lib._racket/private/base..rkt)._~ce~bb))\" style=\"color: inherit\">λ</a></span> <span class=\"p\">(</span><span class=\"nf\">i</span> <span class=\"nv\">e</span><span class=\"p\">)</span>\n            <span class=\"p\">(</span><span class=\"nf\">message-box</span> <span class=\"s\">\"Clippy\"</span> <span class=\"s\">\"Need <a href=\"http://docs.racket-lang.org/reference/data-structure-contracts.html#(form._((lib._racket/contract/private/misc..rkt)._any))\" style=\"color: inherit\">any</a> help?\"</span><span class=\"p\">))])))</span>\n\n<span class=\"p\">(</span><span class=\"nf\">drracket:get/extend:extend-unit-frame</span> <span class=\"nv\">clippy-frame-mixin</span><span class=\"p\">)</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>As before, remember to restart DrRacket. When you do, there will now be a new menu option in the insert menu. When you press it, a helpful dialog box appears.</p>\n\n<h1 id=\"closing-remarks\">Closing Remarks</h1>\n\n<p>This post shows you how to make plugins for the DrRacket IDE. Both language-specific plugins, as well as global plugins. You can find the project that the samples in this blog are based on in <a href=\"https://github.com/videolang/video/tree/v0.2-beta.1/video\">the video source code</a>. You can also look at a <a href=\"https://docs.racket-lang.org/quickscript/index.html\">3rd party plugin framework for DrRacket</a>, which lets you play with plugins without needing to restart DrRacket.</p>\n\n<div class=\"footnotes\">\n <ol>\n  <li id=\"2018-03-21-making-an-ide-plugin-for-drracket-footnote-1-definition\" class=\"footnote-definition\">\n   <p>Note that we could have used <code>lazy-require</code>to do the same thing.&nbsp;<a href=\"#2018-03-21-making-an-ide-plugin-for-drracket-footnote-1-return\">↩</a></p></li>\n  <li id=\"2018-03-21-making-an-ide-plugin-for-drracket-footnote-2-definition\" class=\"footnote-definition\">\n   <p>In Racket, units are similar to modules, but can have circular dependancies.&nbsp;<a href=\"#2018-03-21-making-an-ide-plugin-for-drracket-footnote-2-return\">↩</a></p></li>\n  <li id=\"2018-03-21-making-an-ide-plugin-for-drracket-footnote-3-definition\" class=\"footnote-definition\">\n   <p>Except for one top-level require statement.&nbsp;<a href=\"#2018-03-21-making-an-ide-plugin-for-drracket-footnote-3-return\">↩</a></p></li>\n  <li id=\"2018-03-21-making-an-ide-plugin-for-drracket-footnote-4-definition\" class=\"footnote-definition\">\n   <p>Note that to make this mixin, the tool also must require <code>racket/class</code> and <code>racket/gui/base</code>.&nbsp;<a href=\"#2018-03-21-making-an-ide-plugin-for-drracket-footnote-4-return\">↩</a></p></li></ol></div>")) ((? . 4) f post (u . "Video v0.2 Beta") (? . 4) 1528738860 (p+ #"/home/travis/build/videolang/website/blog/2017/08/28/video-v0-2-beta/index.html" . unix) (u . "/blog/2017/08/28/video-v0-2-beta/") (u . "2017-08-28T12:10:45") (? . 3) (? . 1) (c (u . "release") c (u . "Author: Leif Andersen")) (u . "\n<p>Today we are announcing the first stable beta for Video. To install it, you can first install <a href=\"https://racket-lang.org\">Racket</a>, and then run:</p>\n\n<pre><code>raco pkg install video-testing</code></pre>\n\n<p>Alternatively, within DrRacket, go to <code>File -&gt; Install Package</code>, and type in <code>video-testing</code>.</p>\n\n<p>Either way, make sure you installed <code>video-testing</code>, the <code>video</code> package points to the latest stable build of Video, which is v0.1.1 at the time of this release.</p>\n\n<p>The documentation for this version can be viewed <a href=\"http://docs.racket-lang.org/video@video-testing/index.html\">on the Racket documentation website</a>. Unlike with the Alpha builds, the documentation has been updated to reflect the new version. As such:</p>\n\n<p><strong>Video v0.2-beta is now mature enough for programmers to reliably use it without segfaults.</strong></p>\n\n<p>The above sentence is significant because it means Video is now one of the most stable open source video production tools available.</p>") #t (u . "\n<p>Today we are announcing the first stable beta for Video. To install it, you can first install <a href=\"https://racket-lang.org\">Racket</a>, and then run:</p>\n\n<pre><code>raco pkg install video-testing</code></pre>\n\n<p>Alternatively, within DrRacket, go to <code>File -&gt; Install Package</code>, and type in <code>video-testing</code>.</p>\n\n<p>Either way, make sure you installed <code>video-testing</code>, the <code>video</code> package points to the latest stable build of Video, which is v0.1.1 at the time of this release.</p>\n\n<p>The documentation for this version can be viewed <a href=\"http://docs.racket-lang.org/video@video-testing/index.html\">on the Racket documentation website</a>. Unlike with the Alpha builds, the documentation has been updated to reflect the new version. As such:</p>\n\n<p><strong>Video v0.2-beta is now mature enough for programmers to reliably use it without segfaults.</strong></p>\n\n<p>The above sentence is significant because it means Video is now one of the most stable open source video production tools available.</p>\n<!-- more-->\n\n<p>You can also download the source code for the build directly on <a href=\"https://github.com/videolang/video/releases/tag/v0.2-betas\">Video&rsquo;s github project page</a>.</p>\n\n<p>We would also like to thank David Christiansen and Benjamin Chung for their extensive use and testing of Video.</p>\n\n<p>A detailed list of changes can be found in the source code&rsquo;s <code>LOG</code> file, and are listed here:</p>\n\n<ul>\n <li>Documentation Improvements to match the v0.2 API.</li>\n <li>Create stable/testing/unstable(master) branches.</li>\n <li>Fix deadlocks with the player, also solves sever segfaults</li>\n <li>Increased stability of Video (it no longer seems to segfault).</li>\n <li>Add infrastructure to lift ffmpeg logs into Racket logs (require libvid), disabled for this release.</li>\n <li>Audio works in live preview</li>\n <li>Introduced concept of <code>merge</code> for multitrack, replaces transition</li>\n <li>Transitions now only appear in playlists.</li>\n <li>Add CI testing for windows builds</li>\n <li>Add initial opengl bindings for windows. (The Racket ones don&rsquo;t)</li>\n <li>Add legacy opengl support (for opengl v2.1+)</li>\n <li>Remove now deprecated MLT bindings.</li>\n <li>Fix many bugs related to multitracks and the way it processes transitions</li>\n <li>Fix concurrency bugs with live player.</li>\n <li>Reintroduce most of the unit tests from the v0.1 build.</li>\n <li>Add video/version to track the version more accurately than Racket&rsquo;s info.rkt system.</li>\n <li>Add video-log and ffmpeg-log to print out debug messages. ffmpeg-log not yet hooked up.</li>\n <li>Fix a few minor bugs preventing Video from running on Windows and Linux. We have now tested it on all three platforms.</li>\n <li>Initial work on live preview. The player has now been updated to show the video in the player window. Additionally Video can now seek video outputs (as well as inputs).</li></ul>\n\n<script type=\"text/javascript\">loadComments(23);</script>")) ((? . 6) f post (u . "Video at BOB 2018") (? . 6) 1528738860 (p+ #"/home/travis/build/videolang/website/blog/2018/04/17/video-at-bob-2018/index.html" . unix) (u . "/blog/2018/04/17/video-at-bob-2018/") (u . "2018-04-17T08:01:51") (? . 5) (? . 0) (c (u . "news")) (u . "\n<p>Video was the topic of <a href=\"http://bobkonf.de/2018/en/\">Bob Konferenz&rsquo;s 2018 keynote</a>. You can find a recording of the on <a href=\"http://bobkonf.de/2018/andersen.html\">the conference page</a>, or below. The talks begins with the same introduction as the one I gave at RacketCon 2017, but goes into more detail on the tower of languages that Video is made of.</p>\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube-nocookie.com/embed/C_aVkKZxj3o\" frameborder=\"0\" allow=\"autoplay; encrypted-media\" allowfullscreen=\"allowfullscreen\"></iframe>") #f (u . "\n<p>Video was the topic of <a href=\"http://bobkonf.de/2018/en/\">Bob Konferenz&rsquo;s 2018 keynote</a>. You can find a recording of the on <a href=\"http://bobkonf.de/2018/andersen.html\">the conference page</a>, or below. The talks begins with the same introduction as the one I gave at RacketCon 2017, but goes into more detail on the tower of languages that Video is made of.</p>\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube-nocookie.com/embed/C_aVkKZxj3o\" frameborder=\"0\" allow=\"autoplay; encrypted-media\" allowfullscreen=\"allowfullscreen\"></iframe>"))))